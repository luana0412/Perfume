<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="JSONLibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2024-05-13T16:13:07Z" specversion="2" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\__init__.py" lineno="17">
<version />
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>JSONLibrary is a robotframework testlibrary for manipulating JSON object (dictionary)

You can get, add, update and delete your json object using JSONPath.

== JSONPath Syntax ==
| JSONPath | Description |
| $        | the root object/element |
| @        | the current object/element |
| . or []  | child operator |
| ..       | recursive descent. JSONPath borrows this syntax from E4X |
| *        | wildcard. All objects/element regardless their names. |
| []       | subscript operator. XPath uses it to iterate over element collections and for predicates.
             In Javascript and JSON it is the native array operator. |
| [,]      | Union operator in XPath results in a combination of node sets. JSONPath allows alternate
             names or array indices as a set. |
| [start:end:step] | array slice operator borrowed from ES4 |
| ?()      | applies a filter (script) expression. |
| ()       | script expression, using the underlying script engine. |

== *** Known issue *** ==
If there is a space in JSONPath expression, the module used by this library will throw an exception.
Therefore, please avoid the space in JSONPath expression if possible.

*Example:*
| JSONPath | Exception? |
| $.[?(@.id == 1)] | Y |
| $.[?(@.id==1)] | N |
| $.[?(@.name=='test 123')] | N |

== Example Test Cases ==
| *** Settings ***     |
| Library              | JSONLibrary |
|                      |
| *** Test Cases ***   |
| TestManipulatingJSON |
| ${json_object}=      |  Load JSON From File  |  example.json  |
| ${object_to_add}=    |  Create Dictionary    |  country=Thailand |
| ${json_object}=      |  Add Object To Json   |  ${json_object}  |  $..address  | ${object_to_add} |
| ${value}=            |  Get Value From Json  |  ${json_object}  |  $..country  |
| Should Be Equal As Strings  |  ${value[0]}   | Thailand  |</doc>
<kw name="Add Object To Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="101">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
<arg>object_to_add</arg>
</arguments>
<doc>Add an dictionary or list object to json object using json_path

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression
    - object_to_add: dictionary or list object to add to json_object which is matched by json_path

Return new json object.

Examples:
| ${dict}=  | Create Dictionary    | latitude=13.1234 | longitude=130.1234 |
| ${json}=  |  Add Object To Json  | ${json}          | $..address         |  ${dict} |</doc>
</kw>
<kw name="Convert Json To String" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="205">
<arguments>
<arg>json_object</arg>
</arguments>
<doc>Convert JSON object to string

Arguments:
    - json_object: json as a dictionary object.

Return new json_string

Examples:
| ${json_str}=  |  Convert JSON To String | ${json_obj} |</doc>
</kw>
<kw name="Convert String To Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="219">
<arguments>
<arg>json_string</arg>
</arguments>
<doc>Convert String to JSON object

Arguments:
    - json_string: JSON string

Return new json_object

Examples:
| ${json_object}=  |  Convert String to JSON | ${json_string} |</doc>
</kw>
<kw name="Delete Object From Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="182">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
</arguments>
<doc>Delete Object From JSON using json_path

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression

Return new json_object

Examples:
| ${json_object}=  |  Delete Object From Json | ${json} |  $..address.streetAddress  |</doc>
</kw>
<kw name="Dump Json To File" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="232">
<arguments>
<arg>dest_file</arg>
<arg>json_object</arg>
<arg>encoding=None</arg>
</arguments>
<doc>Dump JSON to file

Arguments:
    - dest_file: destination file
    - json_object: json as a dictionary object.

Export the JSON object to a file

Examples:
|  Dump JSON To File  | ${OUTPUT_DIR)${/}output.json | ${json} |</doc>
</kw>
<kw name="Get Value From Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="138">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
<arg>fail_on_empty=False</arg>
</arguments>
<doc>Get Value From JSON using JSONPath

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression
    - fail_on_empty: fail the testcases if nothing is returned

Return array of values

Examples:
| ${values}=  |  Get Value From Json  | ${json} |  $..phone_number |
| ${values}=  |  Get Value From Json  | ${json} |  $..missing | fail_on_empty=${True} |</doc>
</kw>
<kw name="Load Json From File" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="79">
<arguments>
<arg>file_name</arg>
<arg>encoding=None</arg>
</arguments>
<doc>Load JSON from file.

Return json as a dictionary object.

Arguments:
    - file_name: absolute json file name
    - encoding: encoding of the file

Return json object (list or dictionary)

Examples:
| ${result}=  |  Load Json From File  | /path/to/file.json |</doc>
</kw>
<kw name="Should Have Value In Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="249">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
</arguments>
<doc>Should Have Value In JSON using JSONPath

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression

Fail if no value is found

Examples:
|  Should Have Value In Json  | ${json} |  $..id_card_number |</doc>
</kw>
<kw name="Should Not Have Value In Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="266">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
</arguments>
<doc>Should Not Have Value In JSON using JSONPath

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression

Fail if at least one value is found

Examples:
|  Should Not Have Value In Json  | ${json} |  $..id_card_number |</doc>
</kw>
<kw name="Update Value To Json" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="159">
<arguments>
<arg>json_object</arg>
<arg>json_path</arg>
<arg>new_value</arg>
</arguments>
<doc>Update value to JSON using JSONPath

Arguments:
    - json_object: json as a dictionary object.
    - json_path: jsonpath expression
    - new_value: value to update

Return new json_object

Examples:
| ${json_object}=  |  Update Value To Json | ${json} |  $..address.streetAddress  |  Ratchadapisek Road |</doc>
</kw>
<kw name="Validate Json By Schema" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="302">
<arguments>
<arg>json_object</arg>
<arg>schema</arg>
</arguments>
<doc>Validate json object by json schema.
Arguments:
    - json_object: json as a dictionary object.
    - schema: schema as a dictionary object.

Fail if json object does not match the schema

Examples:
| Simple | Validate Json By Schema  |  {"foo":bar}  |  {"$schema": "https://schema", "type": "object"} |</doc>
</kw>
<kw name="Validate Json By Schema File" source="C:\GIT\SIMPR\SIMPR-teste-certificacao\SIMPR\Resources\Lib\JSONLibrary\jsonlibrary.py" lineno="285">
<arguments>
<arg>json_object</arg>
<arg>path_to_schema</arg>
<arg>encoding=None</arg>
</arguments>
<doc>Validate json object by json schema file.
Arguments:
    - json_object: json as a dictionary object.
    - json_path: path to file with json schema

Fail if json object does not match the schema

Examples:
| Simple | Validate Json By Schema File  |  {"foo":bar}  |  ${CURDIR}${/}schema.json |</doc>
</kw>
</keywordspec>